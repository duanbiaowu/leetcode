package leetcode

func reverseBits(num uint32) uint32 {
	var res uint32
	for i := 0; i < 32 && num > 0; i++ {
		res |= (num & 1) << (31 - i)
		num >>= 1
	}
	return res
}

const (
	m1 = 0x55555555 // 01010101010101010101010101010101
	m2 = 0x33333333 // 00110011001100110011001100110011
	m4 = 0x0f0f0f0f // 00001111000011110000111100001111
	m8 = 0x00ff00ff // 00000000111111110000000011111111
)

// 对于递归的最底层，交换所有奇偶位
// 1. 取出所有奇数位和偶数位
// 2. 将奇数位移到偶数位上，偶数位移到奇数位上

// 对于递归的倒数第二层
// 1. 每两位分一组，按组号取出所有奇数组和偶数组
// 2. 将奇数组移到偶数组上，偶数组移到奇数组上
func reverseBits2(n uint32) uint32 {
	n = n>>1&m1 | n&m1<<1
	n = n>>2&m2 | n&m2<<2
	n = n>>4&m4 | n&m4<<4
	n = n>>8&m8 | n&m8<<8
	return n>>16 | n<<16
}
